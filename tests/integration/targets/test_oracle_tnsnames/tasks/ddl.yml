---
- name: define connection parameters
  set_fact:
    connection_parameters: &con_param
      hostname: "{{ oracle_hostname }}"      
      port: "{{ oracle_port }}"      
      service_name: "{{ oracle_service_name }}"
      username: "{{ oracle_username }}"
      password: "{{ oracle_password }}"
      mode: "sysdba"
    app_connection_parameters: &app_con_param
      hostname: "{{ oracle_hostname }}"      
      port: "{{ oracle_port }}"      
      service_name: "{{ oracle_service_name }}"      
      username: "foo"
      password: "Xlfsjflkdjgkrehjg1"
      mode: "normal"

- name: prepare test
  oracle_sql:
    <<: *con_param
    sql: "drop user foo cascade"
  failed_when: false
    
- name: prepare test
  oracle_sql:
    <<: *con_param
    script: |      
      create user foo identified by "Xlfsjflkdjgkrehjg1";
      grant create session to foo;
      alter user foo quota unlimited on users;
      create table foo.t_foo (f1 varchar2(10), f2 varchar2(10));

- name: insert statement
  oracle_sql:
    <<: *app_con_param
    sql: "{{ item }}"
  register: _
  failed_when: not _.changed
  loop:
    - "insert into t_foo (f1, f2) values ('ab', 'cd')"
    - "insert into t_foo (f1, f2) values ('ef', 'gh')"

- name: check data
  oracle_sql:
    <<: *app_con_param
    sql: "select f1, f2 from t_foo order by f1"
  register: _

- debug: var=_
  
#  failed_when: _.changed or _.failed or _.data[0]['f1'] != 'ab' or _.data[0]['f2'] != 'cd' or _.data[1]['f1'] != 'ef' or _.data[1]['f2'] != 'gh'

- name: clean test
  oracle_sql:
    <<: *con_param
    sql: "drop user foo cascade"
...
