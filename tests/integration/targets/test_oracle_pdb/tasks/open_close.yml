---

- name: "define connection parameters"
  set_fact:
    connection_parameters: &con_param
      hostname: "{{ oracle_hostname }}"      
      port: "{{ oracle_port }}"      
      service_name: "{{ oracle_service_name }}"
      username: "{{ oracle_username }}"
      password: "{{ oracle_password }}"
      mode: "sysdba"

- name: create a closed PDB
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "closed"
    pdb_admin_username: foo
    pdb_admin_password: bar
    # TODO: test this on non-ASM instance    
    # file_name_convert:
    #   "/opt/oracle/oradata/XE/pdbseed": "/tmp/xepdb2/dbf01"

- name: close PDB
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "closed"
    save_state: false
  register: _
  failed_when: _.failed or _.changed

- name: check PDB state I
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "status"
  register: _
  failed_when: _.state != 'closed'

- name: open PDB
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "opened"
  register: _
  failed_when: _.failed or not _.changed

- name: reopen PDB => no change
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "opened"
  register: _
  failed_when: _.failed or _.changed

- name: check PDB state II
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "status"
  register: _
  failed_when: _.state != 'opened' and _.read_only

- name: close PDB
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "closed"
  register: _
  failed_when: _.failed or not _.changed

- name: open PDB read only
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "read_only"
  register: _
  failed_when: _.failed or not _.changed

- name: check PDB state III
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "status"
  register: _
  failed_when: _.state != 'opened' and not _.read_only
  
- name: drop PDB
  oracle_pdb:
    <<: *con_param
    pdb_name: "XEPDB2"
    state: "absent"
...
